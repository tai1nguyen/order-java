openapi: 3.0.0
info:
  title: Order Java App
  description: This is a sample server for a java shop.
  version: 0.0.1
servers:
  - url: http://localhost:8080/
    description: There are currently no live servers.
tags:
  - name: order
    description: Methods for getting, creating, deleting and updating an order.
  - name: inventory
    description: Methods for retrieving inventory information.
paths:
  /order:
    get:
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
      summary: Returns an order with the matching ID.
      tags:
        - order
      responses:
        '200':
          description: A JSON object containing the order.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OrderDto'
        '404':
          description: No order exists for the provided order ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFoundException'
    post:
      summary: Creates an order.
      tags:
        - order
      requestBody:
        description: Information about the order.
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/OrderDto'
      responses:
        '200':
          description: A JSON object containing the order ID.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  id:
                    type: string
  /order/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    patch:
      summary: Updates an existing order.
      tags:
        - order
      requestBody:
        description: Information about the updates to be made to the order.
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/OrderUpdateDto'
      responses:
        '200':
          description: A JSON object containing the order ID.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  id:
                    type: string
        '404':
            description: No order exists for the provided order ID.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrderNotFoundException'
    delete:
      summary: Deletes and order.
      description: Deletes an order tied to the provided ID.
        Should not fail unless the database encounters an issue
        with the removal process.
      tags:
        - order
      responses:
        '200':
          description: Success response.
        '404':
          description: No order exists for the provided order ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFoundException'
  /inventory/bean:
    get:
      parameters:
        - in: query
          name: type
          schema:
            type: string
          required: true
      summary: Return inventory information for the requested bean type.
      tags:
        - inventory
      responses:
        '200':
          description: A JSON object containing information about the bean type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntryJpa'
  /inventory/beans:
    get:
      summary: Return inventory information for all beans.
      tags:
        - inventory
      responses:
        '200':
          description: A JSON object containing information about the bean type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryEntryJpa'
components:
  schemas:
    OrderDto:
      type: object
      properties:
        price:
          type: number
        orderDate:
          type: string
        deliveryDate:
          type: string
        isComplete:
          type: boolean
        orderedBy:
          type: string
        id:
          type: string
        beans:
          type: array
          items: 
            $ref: '#/components/schemas/OrderContentDto'
    OrderContentDto:
      type: object
      properties:
        quantity:
          type: number
        beanType:
          type: string
          enum: [ ARABICA, ROBUSTA, LIBERIAN, EXCELSA ]
    InventoryEntryJpa:
      type: object
      properties:
        weightPerUnit:
          type: string
        pricePerUnit:
          type: string
        quantity:
          type: number
        beanType:
          type: string
          enum: [ ARABICA, ROBUSTA, LIBERIAN, EXCELSA ]
    OrderUpdateDto:
      type: object
      properties:
        beanAdditions:
          type: array
          items:
            $ref: '#/components/schemas/OrderContentDto'
        beanDeletions:
          type: array
          items:
            $ref: '#/components/schemas/OrderContentDto'
        beanUpdates:
          type: array
          items:
            $ref: '#/components/schemas/OrderContentDto'
        changeDate:
          type: string
    OrderNotFoundException:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: number
        error:
          type: string
        message:
          type: string
        path:
          type: string
